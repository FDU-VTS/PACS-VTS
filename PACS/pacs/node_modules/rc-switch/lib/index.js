"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Switch = React.forwardRef(function (props, ref) {
  var _classNames;

  var mergedRef = ref || React.createRef();
  var initChecked = false;

  if ('checked' in props) {
    initChecked = !!props.checked;
  } else {
    initChecked = !!props.defaultChecked;
  }

  var _React$useState = React.useState(initChecked),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      checked = _React$useState2[0],
      setChecked = _React$useState2[1];

  React.useEffect(function () {
    var autoFocus = props.autoFocus,
        disabled = props.disabled;

    if (autoFocus && !disabled && mergedRef.current) {
      mergedRef.current.focus();
    }
  }, [props.autoFocus]);
  React.useEffect(function () {
    if ('checked' in props) {
      setChecked(!!props.checked);
    }
  }, [props.checked]);

  var setInternalChecked = function setInternalChecked(isChecked, e) {
    var disabled = props.disabled,
        onChange = props.onChange;

    if (disabled) {
      return;
    }

    if (!('checked' in props)) {
      setChecked(isChecked);
    }

    if (onChange) {
      onChange(isChecked, e);
    }
  };

  var handleClick = function handleClick(e) {
    var onClick = props.onClick;
    var newChecked = !checked;
    setInternalChecked(newChecked, e);

    if (onClick) {
      onClick(newChecked, e);
    }
  };

  var handleKeyDown = function handleKeyDown(e) {
    if (e.keyCode === 37) {
      // Left
      setInternalChecked(false, e);
    } else if (e.keyCode === 39) {
      // Right
      setInternalChecked(true, e);
    }
  }; // Handle auto focus when click switch in Chrome


  var handleMouseUp = function handleMouseUp(e) {
    if (mergedRef.current) {
      mergedRef.current.blur();
    }

    if (props.onMouseUp) {
      props.onMouseUp(e);
    }
  };

  var className = props.className,
      prefixCls = props.prefixCls,
      disabled = props.disabled,
      loadingIcon = props.loadingIcon,
      checkedChildren = props.checkedChildren,
      unCheckedChildren = props.unCheckedChildren,
      onChange = props.onChange,
      restProps = _objectWithoutProperties(props, ["className", "prefixCls", "disabled", "loadingIcon", "checkedChildren", "unCheckedChildren", "onChange"]);

  var switchClassName = (0, _classnames.default)((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, "".concat(prefixCls, "-checked"), checked), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
  return React.createElement("button", Object.assign({}, restProps, {
    type: "button",
    role: "switch",
    "aria-checked": checked,
    disabled: disabled,
    className: switchClassName,
    ref: mergedRef,
    onKeyDown: handleKeyDown,
    onClick: handleClick,
    onMouseUp: handleMouseUp
  }), loadingIcon, React.createElement("span", {
    className: "".concat(prefixCls, "-inner")
  }, checked ? checkedChildren : unCheckedChildren));
});
Switch.displayName = 'Switch';
Switch.defaultProps = {
  prefixCls: 'rc-switch',
  checkedChildren: null,
  unCheckedChildren: null,
  className: '',
  defaultChecked: false
};
var _default = Switch;
exports.default = _default;