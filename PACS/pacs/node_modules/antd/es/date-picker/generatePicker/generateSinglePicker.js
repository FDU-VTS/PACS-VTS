function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import classNames from 'classnames';
import CalendarOutlined from '@ant-design/icons/CalendarOutlined';
import ClockCircleOutlined from '@ant-design/icons/ClockCircleOutlined';
import CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';
import RCPicker from 'rc-picker';
import enUS from '../locale/en_US';
import { getPlaceholder } from '../util';
import { ConfigContext } from '../../config-provider';
import LocaleReceiver from '../../locale-provider/LocaleReceiver';
import SizeContext from '../../config-provider/SizeContext';
import { getTimeProps, Components } from '.';
export default function generatePicker(generateConfig) {
  function getPicker(picker, displayName) {
    var Picker =
    /** @class */
    function () {
      var Picker = /*#__PURE__*/function (_React$Component) {
        _inherits(Picker, _React$Component);

        var _super = _createSuper(Picker);

        function Picker() {
          var _this;

          _classCallCheck(this, Picker);

          _this = _super.apply(this, arguments);
          _this.pickerRef = React.createRef();

          _this.focus = function () {
            if (_this.pickerRef.current) {
              _this.pickerRef.current.focus();
            }
          };

          _this.blur = function () {
            if (_this.pickerRef.current) {
              _this.pickerRef.current.blur();
            }
          };

          _this.getDefaultLocale = function () {
            var locale = _this.props.locale;

            var result = _extends(_extends({}, enUS), locale);

            result.lang = _extends(_extends({}, result.lang), (locale || {}).lang);
            return result;
          };

          _this.renderPicker = function (locale) {
            var _this$context = _this.context,
                getPrefixCls = _this$context.getPrefixCls,
                direction = _this$context.direction,
                getPopupContainer = _this$context.getPopupContainer;

            var _a = _this.props,
                customizePrefixCls = _a.prefixCls,
                customizeGetPopupContainer = _a.getPopupContainer,
                className = _a.className,
                customizeSize = _a.size,
                _a$bordered = _a.bordered,
                bordered = _a$bordered === void 0 ? true : _a$bordered,
                placeholder = _a.placeholder,
                restProps = __rest(_a, ["prefixCls", "getPopupContainer", "className", "size", "bordered", "placeholder"]);

            var _this$props = _this.props,
                format = _this$props.format,
                showTime = _this$props.showTime;
            var prefixCls = getPrefixCls('picker', customizePrefixCls);
            var additionalProps = {
              showToday: true
            };
            var additionalOverrideProps = {};

            if (picker) {
              additionalOverrideProps.picker = picker;
            }

            var mergedPicker = picker || _this.props.picker;
            additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({
              format: format,
              picker: mergedPicker
            }, showTime)) : {}), mergedPicker === 'time' ? getTimeProps(_extends(_extends({
              format: format
            }, _this.props), {
              picker: mergedPicker
            })) : {});
            return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {
              var _classNames;

              var mergedSize = customizeSize || size;
              return /*#__PURE__*/React.createElement(RCPicker, _extends({
                ref: _this.pickerRef,
                placeholder: getPlaceholder(mergedPicker, locale, placeholder),
                suffixIcon: mergedPicker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined, null) : /*#__PURE__*/React.createElement(CalendarOutlined, null),
                clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled, null),
                allowClear: true,
                transitionName: "slide-up"
              }, additionalProps, restProps, additionalOverrideProps, {
                locale: locale.lang,
                className: classNames(className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames)),
                prefixCls: prefixCls,
                getPopupContainer: customizeGetPopupContainer || getPopupContainer,
                generateConfig: generateConfig,
                prevIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-prev-icon")
                }),
                nextIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-next-icon")
                }),
                superPrevIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-super-prev-icon")
                }),
                superNextIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-super-next-icon")
                }),
                components: Components,
                direction: direction
              }));
            });
          };

          return _this;
        }

        _createClass(Picker, [{
          key: "render",
          value: function render() {
            return /*#__PURE__*/React.createElement(LocaleReceiver, {
              componentName: "DatePicker",
              defaultLocale: this.getDefaultLocale
            }, this.renderPicker);
          }
        }]);

        return Picker;
      }(React.Component);

      Picker.contextType = ConfigContext;
      return Picker;
    }();

    if (displayName) {
      Picker.displayName = displayName;
    }

    return Picker;
  }

  var DatePicker = getPicker();
  var WeekPicker = getPicker('week', 'WeekPicker');
  var MonthPicker = getPicker('month', 'MonthPicker');
  var YearPicker = getPicker('year', 'YearPicker');
  var TimePicker = getPicker('time', 'TimePicker');
  return {
    DatePicker: DatePicker,
    WeekPicker: WeekPicker,
    MonthPicker: MonthPicker,
    YearPicker: YearPicker,
    TimePicker: TimePicker
  };
}