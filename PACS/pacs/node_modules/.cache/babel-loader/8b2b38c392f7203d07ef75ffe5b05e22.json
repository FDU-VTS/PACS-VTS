{"ast":null,"code":"var _jsxFileName = \"/Users/bly/Documents/\\u5DE5\\u4F5C/\\u5B9E\\u9A8C\\u5BA4/\\u9879\\u76EE/\\u533B\\u7597\\u7CFB\\u7EDF/PACS-VTS/PACS-VTS/PACS/pacs/src/pages/Three.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three'; //import Orbitcontrols from 'three-orbitcontrols';\n//import  './index.less'\n\nclass Three extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.init = () => {\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.mount.clientWidth / this.mount.clientHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      }); //点光源\n\n      const point = new THREE.PointLight(0xffffff);\n      point.position.set(400, 200, 300); //点光源位置\n      // 通过add方法插入场景中，不插入的话，渲染的时候不会获取光源的信息进行光照计算\n\n      scene.add(point);\n      this.scene = scene;\n      this.camera = camera;\n      this.renderer = renderer;\n      renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.mount.appendChild(renderer.domElement);\n      camera.position.z = 5;\n      this.createCube();\n      this.createLine();\n      this.animate();\n    };\n\n    this.createCube = () => {\n      var loader = new THREE.TextureLoader();\n      loader.load('earth.jpg', function (texture) {\n        // 作为纹理，或直接使用TextureLoader\n        const geometry = new THREE.SphereGeometry(15, 10, 10);\n        const meterial = new THREE.MeshBasicMaterial({\n          color: 0x739783,\n          map: texture\n        }); // earth = new THREE.Mesh(geometry, material);\n        // scene.add(earth);\n        // 直接绘制在canvas上\n\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        context.drawImage(texture, 100, 100);\n      }); //const geometry = new THREE.BoxGeometry( 1, 2, 1, 4 );\n      //const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n\n      const cube = new THREE.Mesh(geometry, material);\n      this.cube = cube;\n      this.scene.add(cube);\n    };\n\n    this.createLine = () => {\n      const material = new THREE.LineBasicMaterial({\n        color: 0x0f00ff\n      }); //定义线的材质\n\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(-2, 0, 0));\n      geometry.vertices.push(new THREE.Vector3(0, 2, 0)); //相当于是从 将前两个坐标连成一条线\n      // geometry.vertices.push(new THREE.Vector3( 2, 0, 0) );\n\n      const line = new THREE.Line(geometry, material);\n      this.line = line;\n      line.position.x = -1;\n      line.position.y = 2;\n      this.scene.add(line);\n    };\n\n    this.animate = () => {\n      requestAnimationFrame(this.animate);\n      this.cube.rotation.z += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.line.rotation.x += 0.02;\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas\",\n      style: {\n        width: '800px',\n        height: '800px',\n        background: '#000'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    });\n  }\n\n} //   ReactDOM.render(<Scene />, document.getElementById('canvas'))\n\n\nexport default Three;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS-VTS/PACS-VTS/PACS/pacs/src/pages/Three.js"],"names":["React","Component","THREE","Three","init","scene","Scene","camera","PerspectiveCamera","mount","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","point","PointLight","position","set","add","setSize","appendChild","domElement","z","createCube","createLine","animate","loader","TextureLoader","load","texture","geometry","SphereGeometry","meterial","MeshBasicMaterial","color","map","canvas","document","createElement","context","getContext","drawImage","cube","Mesh","material","LineBasicMaterial","Geometry","vertices","push","Vector3","line","Line","x","y","requestAnimationFrame","rotation","render","componentDidMount","componentWillUnmount","removeChild","width","height","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n//import Orbitcontrols from 'three-orbitcontrols';\n//import  './index.less'\n\nclass Three extends Component {\n   \n    componentDidMount() {\n        this.init()\n    }\n    \n    init = () => {\n        const scene =  new THREE.Scene()\n        const camera = new THREE.PerspectiveCamera( 75, this.mount.clientWidth / this.mount.clientHeight, 0.1, 1000 );\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\n        //点光源\n        const point = new THREE.PointLight(0xffffff);\n        point.position.set(400, 200, 300); //点光源位置\n        // 通过add方法插入场景中，不插入的话，渲染的时候不会获取光源的信息进行光照计算\n        scene.add(point); \n        this.scene = scene\n        this.camera = camera\n        this.renderer = renderer\n        renderer.setSize(this.mount.clientWidth, this.mount.clientHeight );\n        this.mount.appendChild( renderer.domElement );\n        camera.position.z = 5;\n      \n        this.createCube()\n        this.createLine()\n        this.animate();\n        \n    }\n\n\n\n    createCube = () => {\n      var loader = new THREE.TextureLoader();\n      loader.load('earth.jpg', function( texture ) {\n      // 作为纹理，或直接使用TextureLoader\n      const geometry = new THREE.SphereGeometry(15, 10, 10);\n      const meterial = new THREE.MeshBasicMaterial({color: 0x739783, map:texture});\n      // earth = new THREE.Mesh(geometry, material);\n      // scene.add(earth);\n      // 直接绘制在canvas上\n      var canvas =document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      context.drawImage(texture, 100, 100);    \n  })\n      //const geometry = new THREE.BoxGeometry( 1, 2, 1, 4 );\n      //const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      const cube = new THREE.Mesh( geometry, material );\n      this.cube = cube\n      this.scene.add( cube );\n    }\n\n    createLine = () => {\n      const material = new THREE.LineBasicMaterial({color: 0x0f00ff}) //定义线的材质\n      const geometry = new THREE.Geometry()\n      geometry.vertices.push(new THREE.Vector3(-2, 0, 0))\n      geometry.vertices.push(new THREE.Vector3( 0, 2, 0) ); //相当于是从 将前两个坐标连成一条线\n      // geometry.vertices.push(new THREE.Vector3( 2, 0, 0) );\n      const line = new THREE.Line(geometry, material)\n      this.line = line\n      line.position.x = -1\n      line.position.y = 2\n      this.scene.add(line)\n    }\n\n    animate =() => {\n      requestAnimationFrame( this.animate );\n      this.cube.rotation.z += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.line.rotation.x += 0.02\n      this.renderer.render( this.scene, this.camera );\n    }\n\n    componentWillUnmount() {\n        this.mount.removeChild(this.renderer.domElement)\n      }\n    render() {\n        return (\n            <div\n                id= \"canvas\"\n                style={{ width: '800px', height: '800px',background:'#000' }}\n                ref={(mount) => { this.mount = mount }}\n            />\n        );\n    }\n}\n//   ReactDOM.render(<Scene />, document.getElementById('canvas'))\n\nexport default Three;"]},"metadata":{},"sourceType":"module"}