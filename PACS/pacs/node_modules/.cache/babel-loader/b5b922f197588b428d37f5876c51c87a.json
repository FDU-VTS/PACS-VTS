{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/rc-table/es/Body/BodyRow.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","err","isArray","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","rowKey","getRowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","fixHeader","fixColumn","horizonScroll","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","additionalProps","onClick","event","_additionalProps","_len","args","_key","concat","computeRowClassName","columnsKey","baseRowNode","createElement","assign","map","column","colIndex","render","dataIndex","columnClassName","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","nestRowNode","subRecord","subIndex","subKey","displayName"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}