{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useWidthProp } from '../../lib';\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\n\nfunction FormGroup(props) {\n  var children = props.children,\n      className = props.className,\n      grouped = props.grouped,\n      inline = props.inline,\n      unstackable = props.unstackable,\n      widths = props.widths;\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nFormGroup.handledProps = ['as', 'children', 'className', 'grouped', 'inline', 'unstackable', 'widths'];\nFormGroup._meta = {\n  name: 'FormGroup',\n  parent: 'Form',\n  type: META.TYPES.COLLECTION\n};\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal']))\n} : {};\nexport default FormGroup;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/collections/Form/FormGroup.js"],"names":["_toConsumableArray","_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","META","SUI","useKeyOnly","useWidthProp","FormGroup","props","children","className","grouped","inline","unstackable","widths","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","COLLECTION","propTypes","process","env","NODE_ENV","as","node","string","every","disallow","bool","oneOf","concat","WIDTHS"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,IAA7D,EAAmEC,GAAnE,EAAwEC,UAAxE,EAAoFC,YAApF,QAAwG,WAAxG;AAEA;;;;;AAIA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,MAAM,GAAGJ,KAAK,CAACI,MAHnB;AAAA,MAIIC,WAAW,GAAGL,KAAK,CAACK,WAJxB;AAAA,MAKIC,MAAM,GAAGN,KAAK,CAACM,MALnB;AAQA,MAAIC,OAAO,GAAGlB,EAAE,CAACQ,UAAU,CAACM,OAAD,EAAU,SAAV,CAAX,EAAiCN,UAAU,CAACO,MAAD,EAAS,QAAT,CAA3C,EAA+DP,UAAU,CAACQ,WAAD,EAAc,aAAd,CAAzE,EAAuGP,YAAY,CAACQ,MAAD,EAAS,IAAT,EAAe,IAAf,CAAnH,EAAyI,QAAzI,EAAmJJ,SAAnJ,CAAhB;AACA,MAAIM,IAAI,GAAGd,iBAAiB,CAACK,SAAD,EAAYC,KAAZ,CAA5B;AACA,MAAIS,WAAW,GAAGhB,cAAc,CAACM,SAAD,EAAYC,KAAZ,CAAhC;AAEA,SAAOT,KAAK,CAACmB,aAAN,CACLD,WADK,EAELrB,QAAQ,CAAC,EAAD,EAAKoB,IAAL,EAAW;AAAEN,IAAAA,SAAS,EAAEK;AAAb,GAAX,CAFH,EAGLN,QAHK,CAAP;AAKD;;AAEDF,SAAS,CAACY,YAAV,GAAyB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,aAArD,EAAoE,QAApE,CAAzB;AACAZ,SAAS,CAACa,KAAV,GAAkB;AAChBC,EAAAA,IAAI,EAAE,WADU;AAEhBC,EAAAA,MAAM,EAAE,MAFQ;AAGhBC,EAAAA,IAAI,EAAEpB,IAAI,CAACqB,KAAL,CAAWC;AAHD,CAAlB;AAMAlB,SAAS,CAACmB,SAAV,GAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC5D;AACAC,EAAAA,EAAE,EAAE9B,eAAe,CAAC8B,EAFwC;;AAI5D;AACArB,EAAAA,QAAQ,EAAEX,SAAS,CAACiC,IALwC;;AAO5D;AACArB,EAAAA,SAAS,EAAEZ,SAAS,CAACkC,MARuC;;AAU5D;AACArB,EAAAA,OAAO,EAAEX,eAAe,CAACiC,KAAhB,CAAsB,CAACjC,eAAe,CAACkC,QAAhB,CAAyB,CAAC,QAAD,CAAzB,CAAD,EAAuCpC,SAAS,CAACqC,IAAjD,CAAtB,CAXmD;;AAa5D;AACAvB,EAAAA,MAAM,EAAEZ,eAAe,CAACiC,KAAhB,CAAsB,CAACjC,eAAe,CAACkC,QAAhB,CAAyB,CAAC,SAAD,CAAzB,CAAD,EAAwCpC,SAAS,CAACqC,IAAlD,CAAtB,CAdoD;;AAgB5D;AACAtB,EAAAA,WAAW,EAAEf,SAAS,CAACqC,IAjBqC;;AAmB5D;AACArB,EAAAA,MAAM,EAAEhB,SAAS,CAACsC,KAAV,CAAgB,GAAGC,MAAH,CAAU1C,kBAAkB,CAACS,GAAG,CAACkC,MAAL,CAA5B,EAA0C,CAAC,OAAD,CAA1C,CAAhB;AApBoD,CAAxC,GAqBlB,EArBJ;AAuBA,eAAe/B,SAAf","sourcesContent":["import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useWidthProp } from '../../lib';\n\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\nfunction FormGroup(props) {\n  var children = props.children,\n      className = props.className,\n      grouped = props.grouped,\n      inline = props.inline,\n      unstackable = props.unstackable,\n      widths = props.widths;\n\n\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    children\n  );\n}\n\nFormGroup.handledProps = ['as', 'children', 'className', 'grouped', 'inline', 'unstackable', 'widths'];\nFormGroup._meta = {\n  name: 'FormGroup',\n  parent: 'Form',\n  type: META.TYPES.COLLECTION\n};\n\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal']))\n} : {};\n\nexport default FormGroup;"]},"metadata":{},"sourceType":"module"}