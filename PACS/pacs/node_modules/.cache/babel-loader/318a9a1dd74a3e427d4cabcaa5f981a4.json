{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = ['as', 'children', 'className', 'content'];\nMessageContent._meta = {\n  name: 'MessageContent',\n  parent: 'Message',\n  type: META.TYPES.COLLECTION\n};\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","MessageContent","props","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","COLLECTION","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,IAA5E,QAAwF,WAAxF;AAEA;;;;AAGA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAIA,MAAIC,OAAO,GAAGb,EAAE,CAAC,SAAD,EAAYW,SAAZ,CAAhB;AACA,MAAIG,IAAI,GAAGR,iBAAiB,CAACE,cAAD,EAAiBC,KAAjB,CAA5B;AACA,MAAIM,WAAW,GAAGV,cAAc,CAACG,cAAD,EAAiBC,KAAjB,CAAhC;AAEA,SAAOP,KAAK,CAACc,aAAN,CACLD,WADK,EAELhB,QAAQ,CAAC,EAAD,EAAKe,IAAL,EAAW;AAAEH,IAAAA,SAAS,EAAEE;AAAb,GAAX,CAFH,EAGLV,aAAa,CAACc,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDF,cAAc,CAACU,YAAf,GAA8B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,CAA9B;AACAV,cAAc,CAACW,KAAf,GAAuB;AACrBC,EAAAA,IAAI,EAAE,gBADe;AAErBC,EAAAA,MAAM,EAAE,SAFa;AAGrBC,EAAAA,IAAI,EAAEf,IAAI,CAACgB,KAAL,CAAWC;AAHI,CAAvB;AAMAhB,cAAc,CAACiB,SAAf,GAA2BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACjE;AACAC,EAAAA,EAAE,EAAEzB,eAAe,CAACyB,EAF6C;;AAIjE;AACAnB,EAAAA,QAAQ,EAAET,SAAS,CAAC6B,IAL6C;;AAOjE;AACAnB,EAAAA,SAAS,EAAEV,SAAS,CAAC8B,MAR4C;;AAUjE;AACAnB,EAAAA,OAAO,EAAER,eAAe,CAAC4B;AAXwC,CAAxC,GAYvB,EAZJ;AAcA,eAAexB,cAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A message can contain a content.\n */\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nMessageContent.handledProps = ['as', 'children', 'className', 'content'];\nMessageContent._meta = {\n  name: 'MessageContent',\n  parent: 'Message',\n  type: META.TYPES.COLLECTION\n};\n\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\n\nexport default MessageContent;"]},"metadata":{},"sourceType":"module"}