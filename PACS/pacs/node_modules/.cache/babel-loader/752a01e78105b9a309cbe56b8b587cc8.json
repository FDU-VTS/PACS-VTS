{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * A modal can have a header.\n */\n\nfunction ModalHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx(className, 'header');\n  var rest = getUnhandledProps(ModalHeader, props);\n  var ElementType = getElementType(ModalHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nModalHeader.handledProps = ['as', 'children', 'className', 'content'];\nModalHeader._meta = {\n  name: 'ModalHeader',\n  type: META.TYPES.MODULE,\n  parent: 'Modal'\n};\nModalHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nModalHeader.create = createShorthandFactory(ModalHeader, function (content) {\n  return {\n    content: content\n  };\n});\nexport default ModalHeader;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/modules/Modal/ModalHeader.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","ModalHeader","props","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","MODULE","parent","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,IAApG,QAAgH,WAAhH;AAEA;;;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAIA,MAAIC,OAAO,GAAGd,EAAE,CAACY,SAAD,EAAY,QAAZ,CAAhB;AACA,MAAIG,IAAI,GAAGR,iBAAiB,CAACE,WAAD,EAAcC,KAAd,CAA5B;AACA,MAAIM,WAAW,GAAGV,cAAc,CAACG,WAAD,EAAcC,KAAd,CAAhC;AAEA,SAAOR,KAAK,CAACe,aAAN,CACLD,WADK,EAELjB,QAAQ,CAAC,EAAD,EAAKgB,IAAL,EAAW;AAAEH,IAAAA,SAAS,EAAEE;AAAb,GAAX,CAFH,EAGLX,aAAa,CAACe,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDF,WAAW,CAACU,YAAZ,GAA2B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,CAA3B;AACAV,WAAW,CAACW,KAAZ,GAAoB;AAClBC,EAAAA,IAAI,EAAE,aADY;AAElBC,EAAAA,IAAI,EAAEd,IAAI,CAACe,KAAL,CAAWC,MAFC;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAApB;AAMAhB,WAAW,CAACiB,SAAZ,GAAwBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC9D;AACAC,EAAAA,EAAE,EAAEzB,eAAe,CAACyB,EAF0C;;AAI9D;AACAnB,EAAAA,QAAQ,EAAEV,SAAS,CAAC8B,IAL0C;;AAO9D;AACAnB,EAAAA,SAAS,EAAEX,SAAS,CAAC+B,MARyC;;AAU9D;AACAnB,EAAAA,OAAO,EAAER,eAAe,CAAC4B;AAXqC,CAAxC,GAYpB,EAZJ;AAcAxB,WAAW,CAACyB,MAAZ,GAAqB9B,sBAAsB,CAACK,WAAD,EAAc,UAAUI,OAAV,EAAmB;AAC1E,SAAO;AAAEA,IAAAA,OAAO,EAAEA;AAAX,GAAP;AACD,CAF0C,CAA3C;AAIA,eAAeJ,WAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A modal can have a header.\n */\nfunction ModalHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n\n  var classes = cx(className, 'header');\n  var rest = getUnhandledProps(ModalHeader, props);\n  var ElementType = getElementType(ModalHeader, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nModalHeader.handledProps = ['as', 'children', 'className', 'content'];\nModalHeader._meta = {\n  name: 'ModalHeader',\n  type: META.TYPES.MODULE,\n  parent: 'Modal'\n};\n\nModalHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\n\nModalHeader.create = createShorthandFactory(ModalHeader, function (content) {\n  return { content: content };\n});\n\nexport default ModalHeader;"]},"metadata":{},"sourceType":"module"}