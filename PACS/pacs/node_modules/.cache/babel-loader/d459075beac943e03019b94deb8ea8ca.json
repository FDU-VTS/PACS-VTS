{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * A PopupContent displays the content body of a Popover.\n */\n\nexport default function PopupContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(PopupContent, props);\n  var ElementType = getElementType(PopupContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nPopupContent.handledProps = ['as', 'children', 'className', 'content'];\nPopupContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** The content of the Popup */\n  children: PropTypes.node,\n\n  /** Classes to add to the Popup content className. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nPopupContent._meta = {\n  name: 'PopupContent',\n  type: META.TYPES.MODULE,\n  parent: 'Popup'\n};\nPopupContent.create = createShorthandFactory(PopupContent, function (children) {\n  return {\n    children: children\n  };\n});","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/modules/Popup/PopupContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","PopupContent","props","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","_meta","name","type","TYPES","MODULE","parent","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,IAApG,QAAgH,WAAhH;AAEA;;;;AAGA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAIA,MAAIC,OAAO,GAAGd,EAAE,CAAC,SAAD,EAAYY,SAAZ,CAAhB;AACA,MAAIG,IAAI,GAAGR,iBAAiB,CAACE,YAAD,EAAeC,KAAf,CAA5B;AACA,MAAIM,WAAW,GAAGV,cAAc,CAACG,YAAD,EAAeC,KAAf,CAAhC;AAEA,SAAOR,KAAK,CAACe,aAAN,CACLD,WADK,EAELjB,QAAQ,CAAC,EAAD,EAAKgB,IAAL,EAAW;AAAEH,IAAAA,SAAS,EAAEE;AAAb,GAAX,CAFH,EAGLX,aAAa,CAACe,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;AAEDF,YAAY,CAACU,YAAb,GAA4B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,CAA5B;AACAV,YAAY,CAACW,SAAb,GAAyBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/D;AACAC,EAAAA,EAAE,EAAEnB,eAAe,CAACmB,EAF2C;;AAI/D;AACAb,EAAAA,QAAQ,EAAEV,SAAS,CAACwB,IAL2C;;AAO/D;AACAb,EAAAA,SAAS,EAAEX,SAAS,CAACyB,MAR0C;;AAU/D;AACAb,EAAAA,OAAO,EAAER,eAAe,CAACsB;AAXsC,CAAxC,GAYrB,EAZJ;AAcAlB,YAAY,CAACmB,KAAb,GAAqB;AACnBC,EAAAA,IAAI,EAAE,cADa;AAEnBC,EAAAA,IAAI,EAAEtB,IAAI,CAACuB,KAAL,CAAWC,MAFE;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;AAMAxB,YAAY,CAACyB,MAAb,GAAsB9B,sBAAsB,CAACK,YAAD,EAAe,UAAUE,QAAV,EAAoB;AAC7E,SAAO;AAAEA,IAAAA,QAAQ,EAAEA;AAAZ,GAAP;AACD,CAF2C,CAA5C","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A PopupContent displays the content body of a Popover.\n */\nexport default function PopupContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(PopupContent, props);\n  var ElementType = getElementType(PopupContent, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nPopupContent.handledProps = ['as', 'children', 'className', 'content'];\nPopupContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** The content of the Popup */\n  children: PropTypes.node,\n\n  /** Classes to add to the Popup content className. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\n\nPopupContent._meta = {\n  name: 'PopupContent',\n  type: META.TYPES.MODULE,\n  parent: 'Popup'\n};\n\nPopupContent.create = createShorthandFactory(PopupContent, function (children) {\n  return { children: children };\n});"]},"metadata":{},"sourceType":"module"}