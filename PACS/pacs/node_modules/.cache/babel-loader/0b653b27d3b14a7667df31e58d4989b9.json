{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n  if (!childrenUtils.isNil(children)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n  if (!childrenUtils.isNil(content)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description));\n}\n\nCardContent.handledProps = ['as', 'children', 'className', 'content', 'description', 'extra', 'header', 'meta', 'textAlign'];\nCardContent._meta = {\n  name: 'CardContent',\n  parent: 'Card',\n  type: META.TYPES.VIEW\n};\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js"],"names":["_extends","_without","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","META","SUI","useKeyOnly","useTextAlignProp","CardDescription","CardHeader","CardMeta","CardContent","props","children","className","content","description","extra","header","meta","textAlign","classes","rest","ElementType","isNil","createElement","val","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand","bool","oneOf","TEXT_ALIGNMENTS"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n\n\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    children\n  );\n  if (!childrenUtils.isNil(content)) return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    content\n  );\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    createShorthand(CardHeader, function (val) {\n      return { content: val };\n    }, header),\n    createShorthand(CardMeta, function (val) {\n      return { content: val };\n    }, meta),\n    createShorthand(CardDescription, function (val) {\n      return { content: val };\n    }, description)\n  );\n}\n\nCardContent.handledProps = ['as', 'children', 'className', 'content', 'description', 'extra', 'header', 'meta', 'textAlign'];\nCardContent._meta = {\n  name: 'CardContent',\n  parent: 'Card',\n  type: META.TYPES.VIEW\n};\n\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\n\nexport default CardContent;"]},"metadata":{},"sourceType":"module"}