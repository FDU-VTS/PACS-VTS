{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n/**\n * Used in some Button types, such as `animated`.\n */\n\nfunction ButtonContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      hidden = props.hidden,\n      visible = props.visible;\n  var classes = cx(useKeyOnly(visible, 'visible'), useKeyOnly(hidden, 'hidden'), 'content', className);\n  var rest = getUnhandledProps(ButtonContent, props);\n  var ElementType = getElementType(ButtonContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nButtonContent.handledProps = ['as', 'children', 'className', 'content', 'hidden', 'visible'];\nButtonContent._meta = {\n  name: 'ButtonContent',\n  parent: 'Button',\n  type: META.TYPES.ELEMENT\n};\nButtonContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Initially hidden, visible on hover. */\n  hidden: PropTypes.bool,\n\n  /** Initially visible, hidden on hover. */\n  visible: PropTypes.bool\n} : {};\nexport default ButtonContent;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","ButtonContent","props","children","className","content","hidden","visible","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","bool"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,IAA5E,EAAkFC,UAAlF,QAAoG,WAApG;AAEA;;;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,MAAM,GAAGJ,KAAK,CAACI,MAHnB;AAAA,MAIIC,OAAO,GAAGL,KAAK,CAACK,OAJpB;AAMA,MAAIC,OAAO,GAAGhB,EAAE,CAACQ,UAAU,CAACO,OAAD,EAAU,SAAV,CAAX,EAAiCP,UAAU,CAACM,MAAD,EAAS,QAAT,CAA3C,EAA+D,SAA/D,EAA0EF,SAA1E,CAAhB;AACA,MAAIK,IAAI,GAAGX,iBAAiB,CAACG,aAAD,EAAgBC,KAAhB,CAA5B;AACA,MAAIQ,WAAW,GAAGb,cAAc,CAACI,aAAD,EAAgBC,KAAhB,CAAhC;AAEA,SAAOR,KAAK,CAACiB,aAAN,CACLD,WADK,EAELnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;AAAEL,IAAAA,SAAS,EAAEI;AAAb,GAAX,CAFH,EAGLb,aAAa,CAACiB,KAAd,CAAoBT,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDF,aAAa,CAACY,YAAd,GAA6B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,SAArD,CAA7B;AACAZ,aAAa,CAACa,KAAd,GAAsB;AACpBC,EAAAA,IAAI,EAAE,eADc;AAEpBC,EAAAA,MAAM,EAAE,QAFY;AAGpBC,EAAAA,IAAI,EAAElB,IAAI,CAACmB,KAAL,CAAWC;AAHG,CAAtB;AAMAlB,aAAa,CAACmB,SAAd,GAA0BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChE;AACAC,EAAAA,EAAE,EAAE5B,eAAe,CAAC4B,EAF4C;;AAIhE;AACArB,EAAAA,QAAQ,EAAEV,SAAS,CAACgC,IAL4C;;AAOhE;AACArB,EAAAA,SAAS,EAAEX,SAAS,CAACiC,MAR2C;;AAUhE;AACArB,EAAAA,OAAO,EAAET,eAAe,CAAC+B,gBAXuC;;AAahE;AACArB,EAAAA,MAAM,EAAEb,SAAS,CAACmC,IAd8C;;AAgBhE;AACArB,EAAAA,OAAO,EAAEd,SAAS,CAACmC;AAjB6C,CAAxC,GAkBtB,EAlBJ;AAoBA,eAAe3B,aAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * Used in some Button types, such as `animated`.\n */\nfunction ButtonContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      hidden = props.hidden,\n      visible = props.visible;\n\n  var classes = cx(useKeyOnly(visible, 'visible'), useKeyOnly(hidden, 'hidden'), 'content', className);\n  var rest = getUnhandledProps(ButtonContent, props);\n  var ElementType = getElementType(ButtonContent, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nButtonContent.handledProps = ['as', 'children', 'className', 'content', 'hidden', 'visible'];\nButtonContent._meta = {\n  name: 'ButtonContent',\n  parent: 'Button',\n  type: META.TYPES.ELEMENT\n};\n\nButtonContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Initially hidden, visible on hover. */\n  hidden: PropTypes.bool,\n\n  /** Initially visible, hidden on hover. */\n  visible: PropTypes.bool\n} : {};\n\nexport default ButtonContent;"]},"metadata":{},"sourceType":"module"}