{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\nimport FeedLike from './FeedLike';\n/**\n * A feed can contain a meta.\n */\n\nfunction FeedMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      like = props.like;\n  var classes = cx('meta', className);\n  var rest = getUnhandledProps(FeedMeta, props);\n  var ElementType = getElementType(FeedMeta, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLike, function (val) {\n    return {\n      content: val\n    };\n  }, like), content);\n}\n\nFeedMeta.handledProps = ['as', 'children', 'className', 'content', 'like'];\nFeedMeta._meta = {\n  name: 'FeedMeta',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\nFeedMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for FeedLike. */\n  like: customPropTypes.itemShorthand\n} : {};\nexport default FeedMeta;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/views/Feed/FeedMeta.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","META","FeedLike","FeedMeta","props","children","className","content","like","classes","rest","ElementType","isNil","createElement","val","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,EAA0DC,cAA1D,EAA0EC,iBAA1E,EAA6FC,IAA7F,QAAyG,WAAzG;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;;;;AAGA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,IAAI,GAAGJ,KAAK,CAACI,IAHjB;AAMA,MAAIC,OAAO,GAAGhB,EAAE,CAAC,MAAD,EAASa,SAAT,CAAhB;AACA,MAAII,IAAI,GAAGV,iBAAiB,CAACG,QAAD,EAAWC,KAAX,CAA5B;AACA,MAAIO,WAAW,GAAGZ,cAAc,CAACI,QAAD,EAAWC,KAAX,CAAhC;;AAEA,MAAI,CAACR,aAAa,CAACgB,KAAd,CAAoBP,QAApB,CAAL,EAAoC;AAClC,WAAOV,KAAK,CAACkB,aAAN,CACLF,WADK,EAELnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;AAAEJ,MAAAA,SAAS,EAAEG;AAAb,KAAX,CAFH,EAGLJ,QAHK,CAAP;AAKD;;AAED,SAAOV,KAAK,CAACkB,aAAN,CACLF,WADK,EAELnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;AAAEJ,IAAAA,SAAS,EAAEG;AAAb,GAAX,CAFH,EAGLZ,eAAe,CAACK,QAAD,EAAW,UAAUY,GAAV,EAAe;AACvC,WAAO;AAAEP,MAAAA,OAAO,EAAEO;AAAX,KAAP;AACD,GAFc,EAEZN,IAFY,CAHV,EAMLD,OANK,CAAP;AAQD;;AAEDJ,QAAQ,CAACY,YAAT,GAAwB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,MAA3C,CAAxB;AACAZ,QAAQ,CAACa,KAAT,GAAiB;AACfC,EAAAA,IAAI,EAAE,UADS;AAEfC,EAAAA,MAAM,EAAE,MAFO;AAGfC,EAAAA,IAAI,EAAElB,IAAI,CAACmB,KAAL,CAAWC;AAHF,CAAjB;AAMAlB,QAAQ,CAACmB,SAAT,GAAqBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC3D;AACAC,EAAAA,EAAE,EAAE5B,eAAe,CAAC4B,EAFuC;;AAI3D;AACArB,EAAAA,QAAQ,EAAEX,SAAS,CAACiC,IALuC;;AAO3D;AACArB,EAAAA,SAAS,EAAEZ,SAAS,CAACkC,MARsC;;AAU3D;AACArB,EAAAA,OAAO,EAAET,eAAe,CAAC+B,gBAXkC;;AAa3D;AACArB,EAAAA,IAAI,EAAEV,eAAe,CAACgC;AAdqC,CAAxC,GAejB,EAfJ;AAiBA,eAAe3B,QAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\nimport FeedLike from './FeedLike';\n\n/**\n * A feed can contain a meta.\n */\nfunction FeedMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      like = props.like;\n\n\n  var classes = cx('meta', className);\n  var rest = getUnhandledProps(FeedMeta, props);\n  var ElementType = getElementType(FeedMeta, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(\n      ElementType,\n      _extends({}, rest, { className: classes }),\n      children\n    );\n  }\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    createShorthand(FeedLike, function (val) {\n      return { content: val };\n    }, like),\n    content\n  );\n}\n\nFeedMeta.handledProps = ['as', 'children', 'className', 'content', 'like'];\nFeedMeta._meta = {\n  name: 'FeedMeta',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\n\nFeedMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for FeedLike. */\n  like: customPropTypes.itemShorthand\n} : {};\n\nexport default FeedMeta;"]},"metadata":{},"sourceType":"module"}