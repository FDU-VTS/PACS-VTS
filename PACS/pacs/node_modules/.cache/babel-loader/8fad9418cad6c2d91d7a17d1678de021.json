{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\nimport CommentAction from './CommentAction';\nimport CommentActions from './CommentActions';\nimport CommentAuthor from './CommentAuthor';\nimport CommentAvatar from './CommentAvatar';\nimport CommentContent from './CommentContent';\nimport CommentGroup from './CommentGroup';\nimport CommentMetadata from './CommentMetadata';\nimport CommentText from './CommentText';\n/**\n * A comment displays user feedback to site content.\n */\n\nfunction Comment(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content;\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\n  var rest = getUnhandledProps(Comment, props);\n  var ElementType = getElementType(Comment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nComment.handledProps = ['as', 'children', 'className', 'collapsed', 'content'];\nComment._meta = {\n  name: 'Comment',\n  type: META.TYPES.VIEW\n};\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comment can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nComment.Author = CommentAuthor;\nComment.Action = CommentAction;\nComment.Actions = CommentActions;\nComment.Avatar = CommentAvatar;\nComment.Content = CommentContent;\nComment.Group = CommentGroup;\nComment.Metadata = CommentMetadata;\nComment.Text = CommentText;\nexport default Comment;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/views/Comment/Comment.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","CommentAction","CommentActions","CommentAuthor","CommentAvatar","CommentContent","CommentGroup","CommentMetadata","CommentText","Comment","props","className","children","collapsed","content","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","bool","contentShorthand","Author","Action","Actions","Avatar","Content","Group","Metadata","Text"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,IAA5E,EAAkFC,UAAlF,QAAoG,WAApG;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;;;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;AAMA,MAAIC,OAAO,GAAGvB,EAAE,CAACQ,UAAU,CAACa,SAAD,EAAY,WAAZ,CAAX,EAAqC,SAArC,EAAgDF,SAAhD,CAAhB;AACA,MAAIK,IAAI,GAAGlB,iBAAiB,CAACW,OAAD,EAAUC,KAAV,CAA5B;AACA,MAAIO,WAAW,GAAGpB,cAAc,CAACY,OAAD,EAAUC,KAAV,CAAhC;AAEA,SAAOhB,KAAK,CAACwB,aAAN,CACLD,WADK,EAEL1B,QAAQ,CAAC,EAAD,EAAKyB,IAAL,EAAW;AAAEL,IAAAA,SAAS,EAAEI;AAAb,GAAX,CAFH,EAGLpB,aAAa,CAACwB,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDH,OAAO,CAACW,YAAR,GAAuB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,WAAhC,EAA6C,SAA7C,CAAvB;AACAX,OAAO,CAACY,KAAR,GAAgB;AACdC,EAAAA,IAAI,EAAE,SADQ;AAEdC,EAAAA,IAAI,EAAExB,IAAI,CAACyB,KAAL,CAAWC;AAFH,CAAhB;AAKAhB,OAAO,CAACiB,SAAR,GAAoBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC1D;AACAC,EAAAA,EAAE,EAAElC,eAAe,CAACkC,EAFsC;;AAI1D;AACAlB,EAAAA,QAAQ,EAAEnB,SAAS,CAACsC,IALsC;;AAO1D;AACApB,EAAAA,SAAS,EAAElB,SAAS,CAACuC,MARqC;;AAU1D;AACAnB,EAAAA,SAAS,EAAEpB,SAAS,CAACwC,IAXqC;;AAa1D;AACAnB,EAAAA,OAAO,EAAElB,eAAe,CAACsC;AAdiC,CAAxC,GAehB,EAfJ;AAiBAzB,OAAO,CAAC0B,MAAR,GAAiBhC,aAAjB;AACAM,OAAO,CAAC2B,MAAR,GAAiBnC,aAAjB;AACAQ,OAAO,CAAC4B,OAAR,GAAkBnC,cAAlB;AACAO,OAAO,CAAC6B,MAAR,GAAiBlC,aAAjB;AACAK,OAAO,CAAC8B,OAAR,GAAkBlC,cAAlB;AACAI,OAAO,CAAC+B,KAAR,GAAgBlC,YAAhB;AACAG,OAAO,CAACgC,QAAR,GAAmBlC,eAAnB;AACAE,OAAO,CAACiC,IAAR,GAAelC,WAAf;AAEA,eAAeC,OAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\nimport CommentAction from './CommentAction';\nimport CommentActions from './CommentActions';\nimport CommentAuthor from './CommentAuthor';\nimport CommentAvatar from './CommentAvatar';\nimport CommentContent from './CommentContent';\nimport CommentGroup from './CommentGroup';\nimport CommentMetadata from './CommentMetadata';\nimport CommentText from './CommentText';\n\n/**\n * A comment displays user feedback to site content.\n */\nfunction Comment(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content;\n\n\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\n  var rest = getUnhandledProps(Comment, props);\n  var ElementType = getElementType(Comment, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nComment.handledProps = ['as', 'children', 'className', 'collapsed', 'content'];\nComment._meta = {\n  name: 'Comment',\n  type: META.TYPES.VIEW\n};\n\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comment can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\n\nComment.Author = CommentAuthor;\nComment.Action = CommentAction;\nComment.Actions = CommentActions;\nComment.Avatar = CommentAvatar;\nComment.Content = CommentContent;\nComment.Group = CommentGroup;\nComment.Metadata = CommentMetadata;\nComment.Text = CommentText;\n\nexport default Comment;"]},"metadata":{},"sourceType":"module"}