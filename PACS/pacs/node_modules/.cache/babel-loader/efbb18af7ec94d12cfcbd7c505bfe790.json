{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * A dropdown menu can contain dividers to separate related content.\n */\n\nfunction DropdownDivider(props) {\n  var className = props.className;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(DropdownDivider, props);\n  var ElementType = getElementType(DropdownDivider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nDropdownDivider.handledProps = ['as', 'className'];\nDropdownDivider._meta = {\n  name: 'DropdownDivider',\n  parent: 'Dropdown',\n  type: META.TYPES.MODULE\n};\nDropdownDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default DropdownDivider;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/modules/Dropdown/DropdownDivider.js"],"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","META","DropdownDivider","props","className","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","MODULE","propTypes","process","env","NODE_ENV","as","string"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,IAA7D,QAAyE,WAAzE;AAEA;;;;AAGA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAEA,MAAIC,OAAO,GAAGV,EAAE,CAAC,SAAD,EAAYS,SAAZ,CAAhB;AACA,MAAIE,IAAI,GAAGN,iBAAiB,CAACE,eAAD,EAAkBC,KAAlB,CAA5B;AACA,MAAII,WAAW,GAAGR,cAAc,CAACG,eAAD,EAAkBC,KAAlB,CAAhC;AAEA,SAAON,KAAK,CAACW,aAAN,CAAoBD,WAApB,EAAiCb,QAAQ,CAAC,EAAD,EAAKY,IAAL,EAAW;AAAEF,IAAAA,SAAS,EAAEC;AAAb,GAAX,CAAzC,CAAP;AACD;;AAEDH,eAAe,CAACO,YAAhB,GAA+B,CAAC,IAAD,EAAO,WAAP,CAA/B;AACAP,eAAe,CAACQ,KAAhB,GAAwB;AACtBC,EAAAA,IAAI,EAAE,iBADgB;AAEtBC,EAAAA,MAAM,EAAE,UAFc;AAGtBC,EAAAA,IAAI,EAAEZ,IAAI,CAACa,KAAL,CAAWC;AAHK,CAAxB;AAMAb,eAAe,CAACc,SAAhB,GAA4BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAClE;AACAC,EAAAA,EAAE,EAAEtB,eAAe,CAACsB,EAF8C;;AAIlE;AACAhB,EAAAA,SAAS,EAAER,SAAS,CAACyB;AAL6C,CAAxC,GAMxB,EANJ;AAQA,eAAenB,eAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A dropdown menu can contain dividers to separate related content.\n */\nfunction DropdownDivider(props) {\n  var className = props.className;\n\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(DropdownDivider, props);\n  var ElementType = getElementType(DropdownDivider, props);\n\n  return React.createElement(ElementType, _extends({}, rest, { className: classes }));\n}\n\nDropdownDivider.handledProps = ['as', 'className'];\nDropdownDivider._meta = {\n  name: 'DropdownDivider',\n  parent: 'Dropdown',\n  type: META.TYPES.MODULE\n};\n\nDropdownDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\n\nexport default DropdownDivider;"]},"metadata":{},"sourceType":"module"}