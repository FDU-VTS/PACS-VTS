{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport _each from 'lodash/each';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getUnhandledProps, getElementType, META, SUI } from '../../lib';\nimport BreadcrumbDivider from './BreadcrumbDivider';\nimport BreadcrumbSection from './BreadcrumbSection';\n/**\n * A breadcrumb is used to show hierarchy between content.\n */\n\nfunction Breadcrumb(props) {\n  var children = props.children,\n      className = props.className,\n      divider = props.divider,\n      icon = props.icon,\n      sections = props.sections,\n      size = props.size;\n  var classes = cx('ui', size, 'breadcrumb', className);\n  var rest = getUnhandledProps(Breadcrumb, props);\n  var ElementType = getElementType(Breadcrumb, props);\n  if (!childrenUtils.isNil(children)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n  var childElements = [];\n\n  _each(sections, function (section, index) {\n    // section\n    var breadcrumbElement = BreadcrumbSection.create(section);\n    childElements.push(breadcrumbElement); // divider\n\n    if (index !== sections.length - 1) {\n      var key = breadcrumbElement.key + '_divider' || JSON.stringify(section);\n      childElements.push(BreadcrumbDivider.create({\n        content: divider,\n        icon: icon,\n        key: key\n      }));\n    }\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childElements);\n}\n\nBreadcrumb.handledProps = ['as', 'children', 'className', 'divider', 'icon', 'sections', 'size'];\nBreadcrumb._meta = {\n  name: 'Breadcrumb',\n  type: META.TYPES.COLLECTION\n};\nBreadcrumb.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content of the Breadcrumb.Divider. */\n  divider: customPropTypes.every([customPropTypes.disallow(['icon']), customPropTypes.contentShorthand]),\n\n  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\n   *  Breadcrumb.Divider. */\n  icon: customPropTypes.every([customPropTypes.disallow(['divider']), customPropTypes.itemShorthand]),\n\n  /** Shorthand array of props for Breadcrumb.Section. */\n  sections: customPropTypes.collectionShorthand,\n\n  /** Size of Breadcrumb. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\nBreadcrumb.Divider = BreadcrumbDivider;\nBreadcrumb.Section = BreadcrumbSection;\nexport default Breadcrumb;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/Breadcrumb.js"],"names":["_extends","_without","_each","cx","PropTypes","React","childrenUtils","customPropTypes","getUnhandledProps","getElementType","META","SUI","BreadcrumbDivider","BreadcrumbSection","Breadcrumb","props","children","className","divider","icon","sections","size","classes","rest","ElementType","isNil","createElement","childElements","section","index","breadcrumbElement","create","push","length","key","JSON","stringify","content","handledProps","_meta","name","type","TYPES","COLLECTION","propTypes","process","env","NODE_ENV","as","node","string","every","disallow","contentShorthand","itemShorthand","collectionShorthand","oneOf","SIZES","Divider","Section"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport _each from 'lodash/each';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getUnhandledProps, getElementType, META, SUI } from '../../lib';\nimport BreadcrumbDivider from './BreadcrumbDivider';\nimport BreadcrumbSection from './BreadcrumbSection';\n\n/**\n * A breadcrumb is used to show hierarchy between content.\n */\nfunction Breadcrumb(props) {\n  var children = props.children,\n      className = props.className,\n      divider = props.divider,\n      icon = props.icon,\n      sections = props.sections,\n      size = props.size;\n\n\n  var classes = cx('ui', size, 'breadcrumb', className);\n  var rest = getUnhandledProps(Breadcrumb, props);\n  var ElementType = getElementType(Breadcrumb, props);\n\n  if (!childrenUtils.isNil(children)) return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    children\n  );\n\n  var childElements = [];\n\n  _each(sections, function (section, index) {\n    // section\n    var breadcrumbElement = BreadcrumbSection.create(section);\n    childElements.push(breadcrumbElement);\n\n    // divider\n    if (index !== sections.length - 1) {\n      var key = breadcrumbElement.key + '_divider' || JSON.stringify(section);\n      childElements.push(BreadcrumbDivider.create({ content: divider, icon: icon, key: key }));\n    }\n  });\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childElements\n  );\n}\n\nBreadcrumb.handledProps = ['as', 'children', 'className', 'divider', 'icon', 'sections', 'size'];\nBreadcrumb._meta = {\n  name: 'Breadcrumb',\n  type: META.TYPES.COLLECTION\n};\n\nBreadcrumb.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content of the Breadcrumb.Divider. */\n  divider: customPropTypes.every([customPropTypes.disallow(['icon']), customPropTypes.contentShorthand]),\n\n  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\n   *  Breadcrumb.Divider. */\n  icon: customPropTypes.every([customPropTypes.disallow(['divider']), customPropTypes.itemShorthand]),\n\n  /** Shorthand array of props for Breadcrumb.Section. */\n  sections: customPropTypes.collectionShorthand,\n\n  /** Size of Breadcrumb. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\n\nBreadcrumb.Divider = BreadcrumbDivider;\nBreadcrumb.Section = BreadcrumbSection;\n\nexport default Breadcrumb;"]},"metadata":{},"sourceType":"module"}