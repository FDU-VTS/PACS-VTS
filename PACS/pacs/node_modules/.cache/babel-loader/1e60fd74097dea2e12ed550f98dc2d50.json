{"ast":null,"code":"import pathToRegexp from \"path-to-regexp\";\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compilePath = function compilePath(pattern, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n  if (cache[pattern]) return cache[pattern];\n  var keys = [];\n  var re = pathToRegexp(pattern, keys, options);\n  var compiledPattern = {\n    re: re,\n    keys: keys\n  };\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledPattern;\n    cacheCount++;\n  }\n\n  return compiledPattern;\n};\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\n\n\nvar matchPath = function matchPath(pathname) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments[2];\n  if (typeof options === \"string\") options = {\n    path: options\n  };\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === undefined ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === undefined ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === undefined ? false : _options$sensitive;\n  if (path == null) return parent;\n\n  var _compilePath = compilePath(path, {\n    end: exact,\n    strict: strict,\n    sensitive: sensitive\n  }),\n      re = _compilePath.re,\n      keys = _compilePath.keys;\n\n  var match = re.exec(pathname);\n  if (!match) return null;\n  var url = match[0],\n      values = match.slice(1);\n  var isExact = pathname === url;\n  if (exact && !isExact) return null;\n  return {\n    path: path,\n    // the path pattern used to match\n    url: path === \"/\" && url === \"\" ? \"/\" : url,\n    // the matched portion of the URL\n    isExact: isExact,\n    // whether or not we matched exactly\n    params: keys.reduce(function (memo, key, index) {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  };\n};\n\nexport default matchPath;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/PACS-VTS/PACS/pacs/node_modules/react-router/es/matchPath.js"],"names":["pathToRegexp","patternCache","cacheLimit","cacheCount","compilePath","pattern","options","cacheKey","end","strict","sensitive","cache","keys","re","compiledPattern","matchPath","pathname","arguments","length","undefined","parent","path","_options","_options$exact","exact","_options$strict","_options$sensitive","_compilePath","match","exec","url","values","slice","isExact","params","reduce","memo","key","index","name"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,UAAU,GAAG,KAAjB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AAEA,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;AACvD,MAAIC,QAAQ,GAAG,KAAKD,OAAO,CAACE,GAAb,GAAmBF,OAAO,CAACG,MAA3B,GAAoCH,OAAO,CAACI,SAA3D;AACA,MAAIC,KAAK,GAAGV,YAAY,CAACM,QAAD,CAAZ,KAA2BN,YAAY,CAACM,QAAD,CAAZ,GAAyB,EAApD,CAAZ;AAEA,MAAII,KAAK,CAACN,OAAD,CAAT,EAAoB,OAAOM,KAAK,CAACN,OAAD,CAAZ;AAEpB,MAAIO,IAAI,GAAG,EAAX;AACA,MAAIC,EAAE,GAAGb,YAAY,CAACK,OAAD,EAAUO,IAAV,EAAgBN,OAAhB,CAArB;AACA,MAAIQ,eAAe,GAAG;AAAED,IAAAA,EAAE,EAAEA,EAAN;AAAUD,IAAAA,IAAI,EAAEA;AAAhB,GAAtB;;AAEA,MAAIT,UAAU,GAAGD,UAAjB,EAA6B;AAC3BS,IAAAA,KAAK,CAACN,OAAD,CAAL,GAAiBS,eAAjB;AACAX,IAAAA,UAAU;AACX;;AAED,SAAOW,eAAP;AACD,CAhBD;AAkBA;;;;;AAGA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;AAC3C,MAAIV,OAAO,GAAGW,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,MAAIG,MAAM,GAAGH,SAAS,CAAC,CAAD,CAAtB;AAEA,MAAI,OAAOX,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG;AAAEe,IAAAA,IAAI,EAAEf;AAAR,GAAV;AAEjC,MAAIgB,QAAQ,GAAGhB,OAAf;AAAA,MACIe,IAAI,GAAGC,QAAQ,CAACD,IADpB;AAAA,MAEIE,cAAc,GAAGD,QAAQ,CAACE,KAF9B;AAAA,MAGIA,KAAK,GAAGD,cAAc,KAAKJ,SAAnB,GAA+B,KAA/B,GAAuCI,cAHnD;AAAA,MAIIE,eAAe,GAAGH,QAAQ,CAACb,MAJ/B;AAAA,MAKIA,MAAM,GAAGgB,eAAe,KAAKN,SAApB,GAAgC,KAAhC,GAAwCM,eALrD;AAAA,MAMIC,kBAAkB,GAAGJ,QAAQ,CAACZ,SANlC;AAAA,MAOIA,SAAS,GAAGgB,kBAAkB,KAAKP,SAAvB,GAAmC,KAAnC,GAA2CO,kBAP3D;AAUA,MAAIL,IAAI,IAAI,IAAZ,EAAkB,OAAOD,MAAP;;AAElB,MAAIO,YAAY,GAAGvB,WAAW,CAACiB,IAAD,EAAO;AAAEb,IAAAA,GAAG,EAAEgB,KAAP;AAAcf,IAAAA,MAAM,EAAEA,MAAtB;AAA8BC,IAAAA,SAAS,EAAEA;AAAzC,GAAP,CAA9B;AAAA,MACIG,EAAE,GAAGc,YAAY,CAACd,EADtB;AAAA,MAEID,IAAI,GAAGe,YAAY,CAACf,IAFxB;;AAIA,MAAIgB,KAAK,GAAGf,EAAE,CAACgB,IAAH,CAAQb,QAAR,CAAZ;AAEA,MAAI,CAACY,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAIE,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAf;AAAA,MACIG,MAAM,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,CADb;AAGA,MAAIC,OAAO,GAAGjB,QAAQ,KAAKc,GAA3B;AAEA,MAAIN,KAAK,IAAI,CAACS,OAAd,EAAuB,OAAO,IAAP;AAEvB,SAAO;AACLZ,IAAAA,IAAI,EAAEA,IADD;AACO;AACZS,IAAAA,GAAG,EAAET,IAAI,KAAK,GAAT,IAAgBS,GAAG,KAAK,EAAxB,GAA6B,GAA7B,GAAmCA,GAFnC;AAEwC;AAC7CG,IAAAA,OAAO,EAAEA,OAHJ;AAGa;AAClBC,IAAAA,MAAM,EAAEtB,IAAI,CAACuB,MAAL,CAAY,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AAC9CF,MAAAA,IAAI,CAACC,GAAG,CAACE,IAAL,CAAJ,GAAiBR,MAAM,CAACO,KAAD,CAAvB;AACA,aAAOF,IAAP;AACD,KAHO,EAGL,EAHK;AAJH,GAAP;AASD,CA1CD;;AA4CA,eAAerB,SAAf","sourcesContent":["import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compilePath = function compilePath(pattern, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var keys = [];\n  var re = pathToRegexp(pattern, keys, options);\n  var compiledPattern = { re: re, keys: keys };\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledPattern;\n    cacheCount++;\n  }\n\n  return compiledPattern;\n};\n\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\nvar matchPath = function matchPath(pathname) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments[2];\n\n  if (typeof options === \"string\") options = { path: options };\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === undefined ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === undefined ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === undefined ? false : _options$sensitive;\n\n\n  if (path == null) return parent;\n\n  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),\n      re = _compilePath.re,\n      keys = _compilePath.keys;\n\n  var match = re.exec(pathname);\n\n  if (!match) return null;\n\n  var url = match[0],\n      values = match.slice(1);\n\n  var isExact = pathname === url;\n\n  if (exact && !isExact) return null;\n\n  return {\n    path: path, // the path pattern used to match\n    url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n    isExact: isExact, // whether or not we matched exactly\n    params: keys.reduce(function (memo, key, index) {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  };\n};\n\nexport default matchPath;"]},"metadata":{},"sourceType":"module"}