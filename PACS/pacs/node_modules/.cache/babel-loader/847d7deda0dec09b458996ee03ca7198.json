{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = ['as', 'children', 'className', 'clearing', 'content', 'fitted', 'hidden', 'horizontal', 'inverted', 'section', 'vertical'];\nDivider._meta = {\n  name: 'Divider',\n  type: META.TYPES.ELEMENT\n};\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","node","string","bool","contentShorthand"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A divider visually segments content into groups.\n */\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n\n\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nDivider.handledProps = ['as', 'children', 'className', 'clearing', 'content', 'fitted', 'hidden', 'horizontal', 'inverted', 'section', 'vertical'];\nDivider._meta = {\n  name: 'Divider',\n  type: META.TYPES.ELEMENT\n};\n\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\n\nexport default Divider;"]},"metadata":{},"sourceType":"module"}