{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = ['active', 'as', 'children', 'className', 'content', 'disabled', 'indeterminate', 'inline', 'inverted', 'size'];\nLoader._meta = {\n  name: 'Loader',\n  type: META.TYPES.ELEMENT\n};\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\nexport default Loader;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","SUI","useKeyOnly","useKeyOrValueAndKey","Loader","props","active","children","className","content","disabled","indeterminate","inline","inverted","size","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","bool","node","string","contentShorthand","oneOfType","oneOf","SIZES"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n\n\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nLoader.handledProps = ['active', 'as', 'children', 'className', 'content', 'disabled', 'indeterminate', 'inline', 'inverted', 'size'];\nLoader._meta = {\n  name: 'Loader',\n  type: META.TYPES.ELEMENT\n};\n\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\n\nexport default Loader;"]},"metadata":{},"sourceType":"module"}