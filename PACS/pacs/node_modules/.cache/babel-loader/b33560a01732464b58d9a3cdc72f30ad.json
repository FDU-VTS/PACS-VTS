{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), React.createElement(Tree, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS-VTS/PACS/pacs/node_modules/rc-tree-select/es/OptionList.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","React","KeyCode","useMemo","Tree","SelectContext","useKeyValueMapping","useKeyValueMap","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","props","ref","prefixCls","itemHeight","virtual","options","flattenOptions","multiple","searchValue","onSelect","onToggleOpen","open","notFoundContent","_React$useContext","useContext","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","treeRef","useRef","memoOptions","prev","_useKeyValueMap","_useKeyValueMap2","cacheKeyMap","cacheValueMap","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","valueKeys","map","val","entity","key","mergedCheckedKeys","checked","halfChecked","useEffect","_treeRef$current","current","scrollTo","lowerSearchValue","String","toLowerCase","filterTreeNode","treeNode","includes","_React$useState","useState","_React$useState2","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","o","onInternalExpand","keys","onListMouseDown","event","preventDefault","onInternalSelect","_","_ref","node","data","selected","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","useImperativeHandle","onKeyDown","_treeRef$current2","which","UP","DOWN","LEFT","RIGHT","ENTER","ESC","onKeyUp","createElement","role","className","concat","onMouseDown","treeProps","loadedKeys","style","assign","focusable","treeData","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","RefOptionList","forwardRef","displayName"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), React.createElement(Tree, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}