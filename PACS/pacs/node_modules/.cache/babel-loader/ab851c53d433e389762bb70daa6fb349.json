{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _isNil from 'lodash/isNil';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType, META } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n  if (!_isNil(icon)) return Icon.create(icon, {\n    defaultProps: _extends({}, rest, {\n      className: classes\n    })\n  });\n  if (!_isNil(content)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = ['as', 'children', 'className', 'content', 'icon'];\nBreadcrumbDivider._meta = {\n  name: 'BreadcrumbDivider',\n  type: META.TYPES.COLLECTION,\n  parent: 'Breadcrumb'\n};\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbDivider.js"],"names":["_extends","_isNil","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getUnhandledProps","getElementType","META","Icon","BreadcrumbDivider","props","children","className","content","icon","classes","rest","ElementType","create","defaultProps","createElement","isNil","handledProps","_meta","name","type","TYPES","COLLECTION","parent","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,iBAAjE,EAAoFC,cAApF,EAAoGC,IAApG,QAAgH,WAAhH;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA;;;;AAGA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,IAAI,GAAGJ,KAAK,CAACI,IAHjB;AAMA,MAAIC,OAAO,GAAGhB,EAAE,CAAC,SAAD,EAAYa,SAAZ,CAAhB;AACA,MAAII,IAAI,GAAGX,iBAAiB,CAACI,iBAAD,EAAoBC,KAApB,CAA5B;AACA,MAAIO,WAAW,GAAGX,cAAc,CAACG,iBAAD,EAAoBC,KAApB,CAAhC;AAEA,MAAI,CAACZ,MAAM,CAACgB,IAAD,CAAX,EAAmB,OAAON,IAAI,CAACU,MAAL,CAAYJ,IAAZ,EAAkB;AAAEK,IAAAA,YAAY,EAAEtB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AAAEJ,MAAAA,SAAS,EAAEG;AAAb,KAAX;AAAxB,GAAlB,CAAP;AACnB,MAAI,CAACjB,MAAM,CAACe,OAAD,CAAX,EAAsB,OAAOZ,KAAK,CAACmB,aAAN,CAC3BH,WAD2B,EAE3BpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AAAEJ,IAAAA,SAAS,EAAEG;AAAb,GAAX,CAFmB,EAG3BF,OAH2B,CAAP;AAMtB,SAAOZ,KAAK,CAACmB,aAAN,CACLH,WADK,EAELpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AAAEJ,IAAAA,SAAS,EAAEG;AAAb,GAAX,CAFH,EAGLb,aAAa,CAACmB,KAAd,CAAoBV,QAApB,IAAgC,GAAhC,GAAsCA,QAHjC,CAAP;AAKD;;AAEDF,iBAAiB,CAACa,YAAlB,GAAiC,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,MAA3C,CAAjC;AACAb,iBAAiB,CAACc,KAAlB,GAA0B;AACxBC,EAAAA,IAAI,EAAE,mBADkB;AAExBC,EAAAA,IAAI,EAAElB,IAAI,CAACmB,KAAL,CAAWC,UAFO;AAGxBC,EAAAA,MAAM,EAAE;AAHgB,CAA1B;AAMAnB,iBAAiB,CAACoB,SAAlB,GAA8BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACpE;AACAC,EAAAA,EAAE,EAAE7B,eAAe,CAAC6B,EAFgD;;AAIpE;AACAtB,EAAAA,QAAQ,EAAEX,SAAS,CAACkC,IALgD;;AAOpE;AACAtB,EAAAA,SAAS,EAAEZ,SAAS,CAACmC,MAR+C;;AAUpE;AACAtB,EAAAA,OAAO,EAAET,eAAe,CAACgC,gBAX2C;;AAapE;AACAtB,EAAAA,IAAI,EAAEV,eAAe,CAACiC;AAd8C,CAAxC,GAe1B,EAfJ;AAiBA5B,iBAAiB,CAACS,MAAlB,GAA2Bf,sBAAsB,CAACM,iBAAD,EAAoB,UAAUK,IAAV,EAAgB;AACnF,SAAO;AAAEA,IAAAA,IAAI,EAAEA;AAAR,GAAP;AACD,CAFgD,CAAjD;AAIA,eAAeL,iBAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _isNil from 'lodash/isNil';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType, META } from '../../lib';\nimport Icon from '../../elements/Icon';\n\n/**\n * A divider sub-component for Breadcrumb component.\n */\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n\n\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) return Icon.create(icon, { defaultProps: _extends({}, rest, { className: classes }) });\n  if (!_isNil(content)) return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    content\n  );\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? '/' : children\n  );\n}\n\nBreadcrumbDivider.handledProps = ['as', 'children', 'className', 'content', 'icon'];\nBreadcrumbDivider._meta = {\n  name: 'BreadcrumbDivider',\n  type: META.TYPES.COLLECTION,\n  parent: 'Breadcrumb'\n};\n\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\n\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return { icon: icon };\n});\n\nexport default BreadcrumbDivider;"]},"metadata":{},"sourceType":"module"}