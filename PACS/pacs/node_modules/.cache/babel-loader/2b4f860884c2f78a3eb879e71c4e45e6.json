{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport { getUnhandledProps, META } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\n\nfunction Radio(props) {\n  var slider = props.slider,\n      toggle = props.toggle,\n      type = props.type;\n  var rest = getUnhandledProps(Radio, props); // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n\n  var radio = !(slider || toggle) || undefined;\n  return React.createElement(Checkbox, _extends({}, rest, {\n    type: type,\n    radio: radio,\n    slider: slider,\n    toggle: toggle\n  }));\n}\n\nRadio.handledProps = ['slider', 'toggle', 'type'];\nRadio._meta = {\n  name: 'Radio',\n  type: META.TYPES.ADDON\n};\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: Checkbox.propTypes.slider,\n\n  /** Format to show an on or off choice. */\n  toggle: Checkbox.propTypes.toggle,\n\n  /** HTML input type, either checkbox or radio. */\n  type: Checkbox.propTypes.type\n} : {};\nRadio.defaultProps = {\n  type: 'radio'\n};\nexport default Radio;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/addons/Radio/Radio.js"],"names":["_extends","React","getUnhandledProps","META","Checkbox","Radio","props","slider","toggle","type","rest","radio","undefined","createElement","handledProps","_meta","name","TYPES","ADDON","propTypes","process","env","NODE_ENV","defaultProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT,EAA4BC,IAA5B,QAAwC,WAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA;;;;;;;AAMA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AAAA,MACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;AAAA,MAEIC,IAAI,GAAGH,KAAK,CAACG,IAFjB;AAIA,MAAIC,IAAI,GAAGR,iBAAiB,CAACG,KAAD,EAAQC,KAAR,CAA5B,CALoB,CAMpB;AACA;AACA;;AACA,MAAIK,KAAK,GAAG,EAAEJ,MAAM,IAAIC,MAAZ,KAAuBI,SAAnC;AAEA,SAAOX,KAAK,CAACY,aAAN,CAAoBT,QAApB,EAA8BJ,QAAQ,CAAC,EAAD,EAAKU,IAAL,EAAW;AAAED,IAAAA,IAAI,EAAEA,IAAR;AAAcE,IAAAA,KAAK,EAAEA,KAArB;AAA4BJ,IAAAA,MAAM,EAAEA,MAApC;AAA4CC,IAAAA,MAAM,EAAEA;AAApD,GAAX,CAAtC,CAAP;AACD;;AAEDH,KAAK,CAACS,YAAN,GAAqB,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CAArB;AACAT,KAAK,CAACU,KAAN,GAAc;AACZC,EAAAA,IAAI,EAAE,OADM;AAEZP,EAAAA,IAAI,EAAEN,IAAI,CAACc,KAAL,CAAWC;AAFL,CAAd;AAKAb,KAAK,CAACc,SAAN,GAAkBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACxD;AACAf,EAAAA,MAAM,EAAEH,QAAQ,CAACe,SAAT,CAAmBZ,MAF6B;;AAIxD;AACAC,EAAAA,MAAM,EAAEJ,QAAQ,CAACe,SAAT,CAAmBX,MAL6B;;AAOxD;AACAC,EAAAA,IAAI,EAAEL,QAAQ,CAACe,SAAT,CAAmBV;AAR+B,CAAxC,GASd,EATJ;AAWAJ,KAAK,CAACkB,YAAN,GAAqB;AACnBd,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,eAAeJ,KAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\n\nimport { getUnhandledProps, META } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\n\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\nfunction Radio(props) {\n  var slider = props.slider,\n      toggle = props.toggle,\n      type = props.type;\n\n  var rest = getUnhandledProps(Radio, props);\n  // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n  var radio = !(slider || toggle) || undefined;\n\n  return React.createElement(Checkbox, _extends({}, rest, { type: type, radio: radio, slider: slider, toggle: toggle }));\n}\n\nRadio.handledProps = ['slider', 'toggle', 'type'];\nRadio._meta = {\n  name: 'Radio',\n  type: META.TYPES.ADDON\n};\n\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: Checkbox.propTypes.slider,\n\n  /** Format to show an on or off choice. */\n  toggle: Checkbox.propTypes.toggle,\n\n  /** HTML input type, either checkbox or radio. */\n  type: Checkbox.propTypes.type\n} : {};\n\nRadio.defaultProps = {\n  type: 'radio'\n};\n\nexport default Radio;"]},"metadata":{},"sourceType":"module"}