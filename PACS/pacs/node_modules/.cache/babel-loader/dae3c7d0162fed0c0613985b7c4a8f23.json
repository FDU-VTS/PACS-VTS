{"ast":null,"code":"import * as queryString from 'query-string';\nconst PATIENTS_ROOT_URL = '/api/patients';\nconst STUDIES_ROOT_URL = '/api/studies';\nconst SERIES_ROOT_URL = '/api/series';\nconst INSTANCES_ROOT_URL = '/api/instances';\nexport default class DicomService {\n  static findPatients(f, params = {}) {\n    fetch(`${PATIENTS_ROOT_URL}?${queryString.stringify(params)}`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findStudies(f) {\n    fetch(STUDIES_ROOT_URL).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      console.log(error);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findStudiesByPatient(f, patientId) {\n    fetch(`/api/patients/${patientId}/studies`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findStudyById(studyId, f) {\n    fetch(`${STUDIES_ROOT_URL}/${studyId}`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findSeries(f) {\n    fetch(SERIES_ROOT_URL).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findInstances(f) {\n    fetch(INSTANCES_ROOT_URL).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findStudiesByPatientId(patientId, f) {\n    fetch(`${PATIENTS_ROOT_URL}/${patientId}/studies`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findSeriesByStudyId(studyId, f) {\n    fetch(`${STUDIES_ROOT_URL}/${studyId}/series`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findInstancesBySeriesId(seriesId, f) {\n    fetch(`${SERIES_ROOT_URL}/${seriesId}/instances`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findInstancesById(instanceId, f) {\n    fetch(`${INSTANCES_ROOT_URL}/${instanceId}`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n  static findTagsByInstanceId(instanceId, f) {\n    fetch(`${INSTANCES_ROOT_URL}/${instanceId}/tags`).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      }\n\n      console.log(response.status);\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }).then(response => {\n      return response.json();\n    }).then(f);\n  }\n\n}","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/src/services/DicomService.js"],"names":["queryString","PATIENTS_ROOT_URL","STUDIES_ROOT_URL","SERIES_ROOT_URL","INSTANCES_ROOT_URL","DicomService","findPatients","f","params","fetch","stringify","then","response","status","console","log","error","Error","statusText","json","findStudies","findStudiesByPatient","patientId","findStudyById","studyId","findSeries","findInstances","findStudiesByPatientId","findSeriesByStudyId","findInstancesBySeriesId","seriesId","findInstancesById","instanceId","findTagsByInstanceId"],"mappings":"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","sourcesContent":["import * as queryString from 'query-string';\n\nconst PATIENTS_ROOT_URL = '/api/patients';\nconst STUDIES_ROOT_URL = '/api/studies';\nconst SERIES_ROOT_URL = '/api/series';\nconst INSTANCES_ROOT_URL = '/api/instances';\n\nexport default class DicomService {\n    static findPatients(f, params = {}) {\n        fetch(\n            `${PATIENTS_ROOT_URL}?${queryString.stringify(params)}`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findStudies(f) {\n        fetch(\n            STUDIES_ROOT_URL\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            console.log(error);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findStudiesByPatient(f, patientId) {\n        fetch(\n            `/api/patients/${patientId}/studies`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findStudyById(studyId, f) {\n        fetch(\n            `${STUDIES_ROOT_URL}/${studyId}`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findSeries(f) {\n        fetch(\n            SERIES_ROOT_URL\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findInstances(f) {\n        fetch(\n            INSTANCES_ROOT_URL\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findStudiesByPatientId(patientId, f) {\n        fetch(\n            `${PATIENTS_ROOT_URL}/${patientId}/studies`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findSeriesByStudyId(studyId, f) {\n        fetch(\n            `${STUDIES_ROOT_URL}/${studyId}/series`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findInstancesBySeriesId(seriesId, f) {\n        fetch(\n            `${SERIES_ROOT_URL}/${seriesId}/instances`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findInstancesById(instanceId, f) {\n        fetch(\n            `${INSTANCES_ROOT_URL}/${instanceId}`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n\n    static findTagsByInstanceId(instanceId, f) {\n        fetch(\n            `${INSTANCES_ROOT_URL}/${instanceId}/tags`\n        ).then(function (response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response;\n            }\n            console.log(response.status);\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }).then(response => {\n            return response.json();\n        }).then(f);\n    }\n}"]},"metadata":{},"sourceType":"module"}