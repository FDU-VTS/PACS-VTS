{"ast":null,"code":"import pathToRegexp from \"path-to-regexp\";\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compileGenerator = function compileGenerator(pattern) {\n  var cacheKey = pattern;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n  if (cache[pattern]) return cache[pattern];\n  var compiledGenerator = pathToRegexp.compile(pattern);\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledGenerator;\n    cacheCount++;\n  }\n\n  return compiledGenerator;\n};\n/**\n * Public API for generating a URL pathname from a pattern and parameters.\n */\n\n\nvar generatePath = function generatePath() {\n  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (pattern === \"/\") {\n    return pattern;\n  }\n\n  var generator = compileGenerator(pattern);\n  return generator(params, {\n    pretty: true\n  });\n};\n\nexport default generatePath;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS-VTS/PACS/pacs/node_modules/react-router/es/generatePath.js"],"names":["pathToRegexp","patternCache","cacheLimit","cacheCount","compileGenerator","pattern","cacheKey","cache","compiledGenerator","compile","generatePath","arguments","length","undefined","params","generator","pretty"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,UAAU,GAAG,KAAjB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,OAA1B,EAAmC;AACxD,MAAIC,QAAQ,GAAGD,OAAf;AACA,MAAIE,KAAK,GAAGN,YAAY,CAACK,QAAD,CAAZ,KAA2BL,YAAY,CAACK,QAAD,CAAZ,GAAyB,EAApD,CAAZ;AAEA,MAAIC,KAAK,CAACF,OAAD,CAAT,EAAoB,OAAOE,KAAK,CAACF,OAAD,CAAZ;AAEpB,MAAIG,iBAAiB,GAAGR,YAAY,CAACS,OAAb,CAAqBJ,OAArB,CAAxB;;AAEA,MAAIF,UAAU,GAAGD,UAAjB,EAA6B;AAC3BK,IAAAA,KAAK,CAACF,OAAD,CAAL,GAAiBG,iBAAjB;AACAL,IAAAA,UAAU;AACX;;AAED,SAAOK,iBAAP;AACD,CAdD;AAgBA;;;;;AAGA,IAAIE,YAAY,GAAG,SAASA,YAAT,GAAwB;AACzC,MAAIL,OAAO,GAAGM,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,GAAlF;AACA,MAAIG,MAAM,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAjF;;AAEA,MAAIN,OAAO,KAAK,GAAhB,EAAqB;AACnB,WAAOA,OAAP;AACD;;AACD,MAAIU,SAAS,GAAGX,gBAAgB,CAACC,OAAD,CAAhC;AACA,SAAOU,SAAS,CAACD,MAAD,EAAS;AAAEE,IAAAA,MAAM,EAAE;AAAV,GAAT,CAAhB;AACD,CATD;;AAWA,eAAeN,YAAf","sourcesContent":["import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compileGenerator = function compileGenerator(pattern) {\n  var cacheKey = pattern;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var compiledGenerator = pathToRegexp.compile(pattern);\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledGenerator;\n    cacheCount++;\n  }\n\n  return compiledGenerator;\n};\n\n/**\n * Public API for generating a URL pathname from a pattern and parameters.\n */\nvar generatePath = function generatePath() {\n  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (pattern === \"/\") {\n    return pattern;\n  }\n  var generator = compileGenerator(pattern);\n  return generator(params, { pretty: true });\n};\n\nexport default generatePath;"]},"metadata":{},"sourceType":"module"}