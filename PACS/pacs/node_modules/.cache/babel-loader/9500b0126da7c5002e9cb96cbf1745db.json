{"ast":null,"code":"var _jsxFileName = \"/Users/bly/Documents/\\u5DE5\\u4F5C/\\u5B9E\\u9A8C\\u5BA4/\\u9879\\u76EE/\\u533B\\u7597\\u7CFB\\u7EDF/PACS-VTS/PACS-VTS/PACS/pacs/src/pages/Three.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three'; //import Orbitcontrols from 'three-orbitcontrols';\n//import  './index.less'\n\nclass Three extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.init = () => {\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.mount.clientWidth / this.mount.clientHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.scene = scene;\n      this.camera = camera;\n      this.renderer = renderer;\n      renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.mount.appendChild(renderer.domElement);\n      camera.position.z = 5;\n      this.createCube();\n      this.createLine();\n      this.animate();\n    };\n\n    this.createCube = () => {\n      const geometry = new THREE.BoxGeometry(1, 2, 1, 4);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      this.cube = cube;\n      this.scene.add(cube);\n    };\n\n    this.createLine = () => {\n      const material = new THREE.LineBasicMaterial({\n        color: 0x0f00ff\n      }); //定义线的材质\n\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(-2, 0, 0));\n      geometry.vertices.push(new THREE.Vector3(0, 2, 0)); //相当于是从 将前两个坐标连成一条线\n      // geometry.vertices.push(new THREE.Vector3( 2, 0, 0) );\n\n      const line = new THREE.Line(geometry, material);\n      this.line = line;\n      line.position.x = -1;\n      line.position.y = 2;\n      this.scene.add(line);\n    };\n\n    this.animate = () => {\n      requestAnimationFrame(this.animate);\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.line.rotation.x += 0.02;\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas\",\n      style: {\n        width: '600px',\n        height: '600px',\n        background: '#888'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    });\n  }\n\n} //   ReactDOM.render(<Scene />, document.getElementById('canvas'))\n\n\nexport default Three;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS-VTS/PACS-VTS/PACS/pacs/src/pages/Three.js"],"names":["React","Component","THREE","Three","init","scene","Scene","camera","PerspectiveCamera","mount","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","position","z","createCube","createLine","animate","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","LineBasicMaterial","Geometry","vertices","push","Vector3","line","Line","x","y","requestAnimationFrame","rotation","render","componentDidMount","componentWillUnmount","removeChild","width","height","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n//import Orbitcontrols from 'three-orbitcontrols';\n//import  './index.less'\n\nclass Three extends Component {\n   \n    componentDidMount() {\n        this.init()\n    }\n    \n    init = () => {\n        const scene =  new THREE.Scene()\n        const camera = new THREE.PerspectiveCamera( 75, this.mount.clientWidth / this.mount.clientHeight, 0.1, 1000 );\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.scene = scene\n        this.camera = camera\n        this.renderer = renderer\n        renderer.setSize(this.mount.clientWidth, this.mount.clientHeight );\n        this.mount.appendChild( renderer.domElement );\n        camera.position.z = 5;\n      \n        this.createCube()\n        this.createLine()\n        this.animate();\n        \n    }\n\n    createCube = () => {\n      const geometry = new THREE.BoxGeometry( 1, 2, 1, 4 );\n      const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      const cube = new THREE.Mesh( geometry, material );\n      this.cube = cube\n      this.scene.add( cube );\n    }\n\n    createLine = () => {\n      const material = new THREE.LineBasicMaterial({color: 0x0f00ff}) //定义线的材质\n      const geometry = new THREE.Geometry()\n      geometry.vertices.push(new THREE.Vector3(-2, 0, 0))\n      geometry.vertices.push(new THREE.Vector3( 0, 2, 0) ); //相当于是从 将前两个坐标连成一条线\n      // geometry.vertices.push(new THREE.Vector3( 2, 0, 0) );\n      const line = new THREE.Line(geometry, material)\n      this.line = line\n      line.position.x = -1\n      line.position.y = 2\n      this.scene.add(line)\n    }\n\n    animate =() => {\n      requestAnimationFrame( this.animate );\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.line.rotation.x += 0.02\n      this.renderer.render( this.scene, this.camera );\n    }\n\n    componentWillUnmount() {\n        this.mount.removeChild(this.renderer.domElement)\n      }\n    render() {\n        return (\n            <div\n                id= \"canvas\"\n                style={{ width: '600px', height: '600px',background:'#888' }}\n                ref={(mount) => { this.mount = mount }}\n            />\n        );\n    }\n}\n//   ReactDOM.render(<Scene />, document.getElementById('canvas'))\n\nexport default Three;"]},"metadata":{},"sourceType":"module"}