{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _map from 'lodash/map';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n/**\n * A feed can contain an extra content.\n */\n\nfunction FeedExtra(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      images = props.images,\n      text = props.text;\n  var classes = cx(useKeyOnly(images, 'images'), useKeyOnly(content || text, 'text'), 'extra', className);\n  var rest = getUnhandledProps(FeedExtra, props);\n  var ElementType = getElementType(FeedExtra, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  } // TODO need a \"collection factory\" to handle creating multiple image elements and their keys\n\n\n  var imageElements = _map(images, function (image, index) {\n    var key = [index, image].join('-');\n    return createHTMLImage(image, {\n      key: key\n    });\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content, imageElements);\n}\n\nFeedExtra.handledProps = ['as', 'children', 'className', 'content', 'images', 'text'];\nFeedExtra._meta = {\n  name: 'FeedExtra',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\nFeedExtra.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** An event can contain additional information like a set of images. */\n  images: customPropTypes.every([customPropTypes.disallow(['text']), PropTypes.oneOfType([PropTypes.bool, customPropTypes.collectionShorthand])]),\n\n  /** An event can contain additional text information. */\n  text: PropTypes.bool\n} : {};\nexport default FeedExtra;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/views/Feed/FeedExtra.js"],"names":["_extends","_map","cx","PropTypes","React","childrenUtils","createHTMLImage","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","FeedExtra","props","children","className","content","images","text","classes","rest","ElementType","isNil","createElement","imageElements","image","index","key","join","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","every","disallow","oneOfType","bool","collectionShorthand"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _map from 'lodash/map';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A feed can contain an extra content.\n */\nfunction FeedExtra(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      images = props.images,\n      text = props.text;\n\n\n  var classes = cx(useKeyOnly(images, 'images'), useKeyOnly(content || text, 'text'), 'extra', className);\n  var rest = getUnhandledProps(FeedExtra, props);\n  var ElementType = getElementType(FeedExtra, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(\n      ElementType,\n      _extends({}, rest, { className: classes }),\n      children\n    );\n  }\n\n  // TODO need a \"collection factory\" to handle creating multiple image elements and their keys\n  var imageElements = _map(images, function (image, index) {\n    var key = [index, image].join('-');\n    return createHTMLImage(image, { key: key });\n  });\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    content,\n    imageElements\n  );\n}\n\nFeedExtra.handledProps = ['as', 'children', 'className', 'content', 'images', 'text'];\nFeedExtra._meta = {\n  name: 'FeedExtra',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\n\nFeedExtra.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** An event can contain additional information like a set of images. */\n  images: customPropTypes.every([customPropTypes.disallow(['text']), PropTypes.oneOfType([PropTypes.bool, customPropTypes.collectionShorthand])]),\n\n  /** An event can contain additional text information. */\n  text: PropTypes.bool\n} : {};\n\nexport default FeedExtra;"]},"metadata":{},"sourceType":"module"}