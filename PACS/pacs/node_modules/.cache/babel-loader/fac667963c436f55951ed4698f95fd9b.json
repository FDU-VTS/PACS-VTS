{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = ['as', 'children', 'className', 'content', 'textAlign'];\nCardHeader._meta = {\n  name: 'CardHeader',\n  parent: 'Card',\n  type: META.TYPES.VIEW\n};\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","map":{"version":3,"sources":["/Users/bly/Documents/工作/实验室/项目/医疗系统/PACS/pacs/node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js"],"names":["_extends","_without","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","SUI","useTextAlignProp","CardHeader","props","children","className","content","textAlign","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","oneOf","TEXT_ALIGNMENTS"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,IAA5E,EAAkFC,GAAlF,EAAuFC,gBAAvF,QAA+G,WAA/G;AAEA;;;;AAGA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,SAAS,GAAGJ,KAAK,CAACI,SAHtB;AAKA,MAAIC,OAAO,GAAGhB,EAAE,CAACS,gBAAgB,CAACM,SAAD,CAAjB,EAA8B,QAA9B,EAAwCF,SAAxC,CAAhB;AACA,MAAII,IAAI,GAAGX,iBAAiB,CAACI,UAAD,EAAaC,KAAb,CAA5B;AACA,MAAIO,WAAW,GAAGb,cAAc,CAACK,UAAD,EAAaC,KAAb,CAAhC;AAEA,SAAOT,KAAK,CAACiB,aAAN,CACLD,WADK,EAELpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AAAEJ,IAAAA,SAAS,EAAEG;AAAb,GAAX,CAFH,EAGLb,aAAa,CAACiB,KAAd,CAAoBR,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDF,UAAU,CAACW,YAAX,GAA0B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,WAA3C,CAA1B;AACAX,UAAU,CAACY,KAAX,GAAmB;AACjBC,EAAAA,IAAI,EAAE,YADW;AAEjBC,EAAAA,MAAM,EAAE,MAFS;AAGjBC,EAAAA,IAAI,EAAElB,IAAI,CAACmB,KAAL,CAAWC;AAHA,CAAnB;AAMAjB,UAAU,CAACkB,SAAX,GAAuBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC7D;AACAC,EAAAA,EAAE,EAAE5B,eAAe,CAAC4B,EAFyC;;AAI7D;AACApB,EAAAA,QAAQ,EAAEX,SAAS,CAACgC,IALyC;;AAO7D;AACApB,EAAAA,SAAS,EAAEZ,SAAS,CAACiC,MARwC;;AAU7D;AACApB,EAAAA,OAAO,EAAEV,eAAe,CAAC+B,gBAXoC;;AAa7D;AACApB,EAAAA,SAAS,EAAEd,SAAS,CAACmC,KAAV,CAAgBrC,QAAQ,CAACS,GAAG,CAAC6B,eAAL,EAAsB,WAAtB,CAAxB;AAdkD,CAAxC,GAenB,EAfJ;AAiBA,eAAe3B,UAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useTextAlignProp } from '../../lib';\n\n/**\n * A card can contain a header.\n */\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nCardHeader.handledProps = ['as', 'children', 'className', 'content', 'textAlign'];\nCardHeader._meta = {\n  name: 'CardHeader',\n  parent: 'Card',\n  type: META.TYPES.VIEW\n};\n\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\n\nexport default CardHeader;"]},"metadata":{},"sourceType":"module"}